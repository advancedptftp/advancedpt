@model DataLayer.Models.tblMEmployee

@{
    ViewBag.Title = "Edit";
}
@if (ViewBag.Error != null)
{
    @Html.Raw(ViewBag.Error)
}


<section class="bodyinner">
    <div class="container">
        <div class="report-form clearfix">
            <h2 class="text-center">Employee Master</h2>
            <br /><br />

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @Html.HiddenFor(model => model.Employee_Id)

                @Html.HiddenFor(model => model.CreatedBy)
                @Html.HiddenFor(model => model.CreatedOn)
                @Html.HiddenFor(model => model.User)

                <div class="row">
                    <div class="col-sm-6 col-md-4 form-group">
                        @Html.Label("Last Name")
                        @Html.TextBoxFor(model => model.Last_Name, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Last_Name)

                    </div>
                    <div class="col-sm-6 col-md-4  form-group">
                        @Html.Label("First Name")
                        @Html.TextBoxFor(model => model.First_Name, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.First_Name)
                    </div>


                    <div class="col-sm-6 col-md-4  form-group">
                        @Html.Label("Nick Name")
                        @Html.TextBoxFor(model => model.Nick_Name, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Nick_Name)

                    </div>

                </div>
                <div class="row">
                    @*<div class="col-sm-6 form-group">
                        @Html.Label("Marital Status")


                        <div class="headrightcont">
                            <label class="radio-inline">@Html.RadioButtonFor(m => m.Marital_Status, "0")&nbsp;Single</label>
                        </div>
                        <div class="headrightcont">
                            <label class="radio-inline">@Html.RadioButtonFor(m => m.Marital_Status, "1")&nbsp;Married</label>
                        </div>

                        <div style="clear:both;"></div>
                        @Html.ValidationMessageFor(model => model.Marital_Status)
                    </div>*@
                    <div class="col-sm-6 form-group">
                        @Html.Label("Marital Status")

                        <div class="headrightcont">
                            <label class="control control--radio greenbuttradio1" style="float: left;margin-right: 10px;">
                                <span>Single</span>
                                @Html.RadioButtonFor(m => m.Marital_Status, "0")
                                <div class="control__indicator"></div>
                            </label>
                            @* <label class="radio-inline">@Html.RadioButtonFor(m => m.Marital_Status, "0")&nbsp;Single</label>*@

                            <label class="control control--radio greenbuttradio1" style="float: left;margin-right: 10px;">
                                <span>Married</span>
                                @Html.RadioButtonFor(m => m.Marital_Status, "1")
                                <div class="control__indicator"></div>
                            </label>
                            @*<label class="radio-inline">@Html.RadioButtonFor(m => m.Marital_Status, "1")&nbsp;Married</label>*@
                            <div style="clear:both;"></div>
                        </div>

                        <div style="clear:both;"></div>
                        @Html.ValidationMessageFor(model => model.Marital_Status)
                    </div>

                    @*<div class="col-sm-6 form-group">
                        @Html.Label("Select Gender")

                        <div class="headrightcont">
                            <label class="radio-inline">@Html.RadioButtonFor(m => m.Gender, "M")&nbsp;Male</label>
                        </div>
                        <div class="headrightcont">
                            <label class="radio-inline">@Html.RadioButtonFor(m => m.Gender, "F")&nbsp;Female</label>
                        </div>
                        <div style="clear:both;"></div>
                        @Html.ValidationMessageFor(model => model.Gender)

                    </div>*@
                    <div class="col-sm-6 form-group">
                        @Html.Label("Select Gender")

                        <div class="headrightcont">
                            <label class="control control--radio greenbuttradio1" style="float: left;margin-right: 10px;">
                                <span>Male</span>
                                @Html.RadioButtonFor(m => m.Gender, "M")
                                <div class="control__indicator"></div>
                            </label>


                            @*<label class="radio-inline">@Html.RadioButtonFor(m => m.Gender, "M")&nbsp;Male</label>*@

                            <label class="control control--radio greenbuttradio1" style="float: left;margin-right: 10px;">
                                <span>Female</span>
                                @Html.RadioButtonFor(m => m.Gender, "F")
                                <div class="control__indicator"></div>
                            </label>
                            <div style="clear:both;"></div>
                            @*<label class="radio-inline">@Html.RadioButtonFor(m => m.Gender, "F")&nbsp;Female</label>*@
                        </div>
                        <div style="clear:both;"></div>
                        @Html.ValidationMessageFor(model => model.Gender)

                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6 form-group">
                        @Html.Label("Department")
                        @Html.TextBoxFor(model => model.Department, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Department)
                    </div>
                    <div class="col-sm-6 form-group">
                        @Html.Label("Job Title")
                        @Html.TextBoxFor(model => model.Job_Title, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Job_Title)

                    </div>

                </div>
                <div class="row">

                    <div class="col-sm-6 form-group">
                        @Html.Label("Employee Type")
                        @*@Html.DropDownListFor(m => m.DoctorType, from DataLayer.DoctorType state in Enum.GetValues(typeof(DataLayer.DoctorType))
                            select new SelectListItem() { Text = state.ToString(), Value = ((int)state).ToString() }, string.Empty, new { @class = "form-control" })*@

                        @Html.DropDownListFor(m => m.Emp_Type, from DataLayer.EmployeeType state in Enum.GetValues(typeof(DataLayer.EmployeeType))
                                                               select new SelectListItem() { Text = state.ToString(), Value = ((int)state).ToString() }, new { @class = "form-control" })
                        @*@Html.TextBoxFor(model => model.DoctorType, new { @class = "form-control" })*@
                        @Html.ValidationMessageFor(model => model.Emp_Type)
                        <span id="span_EmpTypeError" style="color: #ff0000;font-size: 20px;"></span>
                    </div>
                    <div class="col-sm-6 form-group">
                        @Html.Label("Location")

                        @Html.DropDownList("Location")

                        @*@Html.TextBoxFor(model => model.Location, new { @class = "form-control" })*@
                        @Html.ValidationMessageFor(model => model.Location)
                    </div>

                </div>

                <div class="row">

                    <div class="col-sm-6 form-group">
                        @Html.Label("Phone1")
                        @Html.TextBoxFor(model => model.Phone2, new { @class = "form-control UsCellFormat" })
                        @Html.ValidationMessageFor(model => model.Phone2)
                    </div>
                    <div class="col-sm-6 form-group">
                        @Html.Label("Phone2")
                        @Html.TextBoxFor(model => model.Phone3, new { @class = "form-control UsCellFormat" })
                        @Html.ValidationMessageFor(model => model.Phone3)
                    </div>
                </div>
                <div class="row">

                    <div class="col-sm-6 form-group">
                        @Html.Label("Address Line1")
                        @Html.TextBoxFor(model => model.Address1, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Address1)
                    </div>
                    <div class="col-sm-6 form-group">
                        @Html.Label("Address Line2")
                        @Html.TextBoxFor(model => model.Address2, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Address2)
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6 form-group">
                        @Html.Label("State")
                        @*@Html.TextBoxFor(model => model.State, new { @class = "form-control" })*@
                        @*@Html.DropDownListFor(e => e.KneeBraceFusionLigamentForm.FusionKneeBraceSize_Id, (IEnumerable<SelectListItem>)ViewBag.FusionKneeBraceSize_Id, new { @class = "form-control", disabled = "disabled" })*@
                        @Html.DropDownListFor(e => e.State, (SelectList)ViewBag.StateName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.State)
                    </div>
                    <div class="col-sm-6 form-group">
                        @Html.Label("City")
                        @Html.TextBoxFor(model => model.City, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.City)
                    </div>

                </div>
                <div class="row">

                    <div class="col-sm-6 form-group">
                        @Html.Label("Zip Code")
                        @Html.TextBoxFor(model => model.ZipCode, new { @class = "form-control zipcode", @maxlength = "5" })
                        @Html.ValidationMessageFor(model => model.ZipCode)
                    </div>
                    <div class="col-sm-6 form-group">
                        @Html.Label("License No")
                        @Html.TextBoxFor(model => model.Licenseno, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Licenseno)
                    </div>

                </div>

                @*<div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>*@
                <div class="subbutt">
                    <input type="submit" value="Save" class="btn btn-orange pull-right" id="btnEditEmp" />

                </div>

            }

            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>
        </div>
    </div>
</section>
<script>
    $('#Location').addClass('form-control');
</script>
<script>
    $(document).ready(function () {
        //$("#tblMUser_Name").keypress(function (e) {
        //    var key = e.keyCode;
        //    if (key >= 48 && key <= 57) {
        //        e.preventDefault();
        //    }
        //});

        $("#Last_Name").keypress(function (e) {
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {
                e.preventDefault();
            }
        });

        $("#First_Name").keypress(function (e) {
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {
                e.preventDefault();
            }
        });

        $("#Nick_Name").keypress(function (e) {
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {
                e.preventDefault();
            }
        });



    });

    $("#btnEditEmp").click(function () {
               
        if ($("#Emp_Type option:selected").val() == 0) {
            $("#span_EmpTypeError").text("Select Employee Type");
            $('#Emp_Type').css('background-color', 'rgba(239, 21, 21, 0.06)');
            return false;
        }
        else {
            $("#span_EmpTypeError").text(" ");
            $('#Emp_Type').css('background-color', 'e5e8ed');

        }

    });
    $("#Emp_Type").change(function () {
        // alert("onchange");
        //alert($('#Emp_Type').val());
        if ($('#Emp_Type').val() > 0) {
            $('#span_EmpTypeError').text(" ");
            $('#Emp_Type').css('background-color', 'e5e8ed');
        }

    });
    //$("#User").change(function () {
    //    //alert("onchange");
    //    //alert($('#Emp_Type').val());
    //    if ($('#User').val() > 0) {
    //        $('#span_OldUserError').text(" ");
    //        $('#User').css('background-color', 'e5e8ed');
    //    }

    //});

   
</script>