@model DataLayer.Models.tblTHandBook

@{
    ViewBag.Title = "Edit";
}
<section class="bodyinner">
    <div class="container">
        <div class="bodyleft">


            @Html.Partial("~/Views/Shared/_LeftPart.cshtml")
        </div>
        <div class="bodyright">

            <div class="report-form clearfix">




                @using (Html.BeginForm("Edit", "Handbook", FormMethod.Post, new { name = "Edit", id = "Edit", enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()



                    @Html.ValidationSummary(true)
                         @Html.HiddenFor(model => model.HandBook_Id)
                    <div class="row">
                        <div class="col-sm-6 col-md-6 form-group">


                            @Html.Label("Chapter")
                            @Html.DropDownList("Chapter", String.Empty)
                            @Html.ValidationMessageFor(model => model.Chapter)
                        </div>
                   
        <div class="col-sm-6 col-md-6 form-group">

            @Html.Label("Section Name")
            @Html.DropDownList("Section", String.Empty)
            @Html.ValidationMessageFor(model => model.Section)
        </div>
    </div>
                      <div class="row">
                          <div class="col-sm-6 col-md-6 form-group">

                              @Html.Label("Page Title")
                              @Html.TextBoxFor(model => model.PageTitle, new { @class = "form-control" })
                              @Html.ValidationMessageFor(model => model.PageTitle)
                          </div>

                        <div class="col-sm-6 col-md-6 form-group">

                            @Html.Label("Page No")
                            @Html.TextBoxFor(model => model.PageNo, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PageNo)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-12">
                            @Html.Label("Page Content", new { @class = "" })
                        </div>
                        <div class="col-sm-12 col-md-12 form-group">

                            <div class="form-group">


                                @Html.HiddenFor(m => m.PageContent)
                                <div id="editor">

                                </div>

                            </div>
                            @Html.Hidden("CreatedOn", DateTime.Now)
                        </div>
                    </div>
                    <div class="subbutt">
                        <input type="submit" value="Save" class="btn btn-orange pull-right" />

                        <div class="clearfix"></div>
                    </div>
                     @Html.HiddenFor(model => model.CreatedOn)
        @Html.HiddenFor(model => model.CreatedBy)
        @Html.Hidden("ModifiedOn", DateTime.Now)


                    <p>@Html.ActionLink("Back to List", "Index")</p>
                }
            </div>



        </div>
        <div class="clearfix"></div>
    </div>
</section>


@*@using (Html.BeginForm("Edit", "Handbook", FormMethod.Post, new { name = "Edit", id = "Edit", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.HandBook_Id)

        <div class="form-group">
            @Html.LabelFor(model => model.PageTitle, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PageTitle)
                @Html.ValidationMessageFor(model => model.PageTitle)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Chapter, "Chapter", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Chapter", String.Empty)
                @Html.ValidationMessageFor(model => model.Chapter)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PageNo, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PageNo)
                @Html.ValidationMessageFor(model => model.PageNo)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PageContent, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(m => m.PageContent)
                <div id="editor">

                </div>
            </div>
        </div>
        @Html.HiddenFor(model => model.CreatedOn)
        @Html.HiddenFor(model => model.CreatedBy)
        @Html.Hidden("ModifiedOn", DateTime.Now)


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@
<script src="@Url.Content("~/Scripts/ckeditor/ckeditor.js")"></script>
<script src="@Url.Content("~/Scripts/ckeditor/sample.js")"></script>
<link rel="stylesheet" href="@Url.Content("~/Content/ckeditor/samples.css")">
<link rel="stylesheet" href="@Url.Content("~/Content/ckeditor/neo.css")">
<style>
    fieldset.scheduler-border {
        border: 1px groove #ddd !important;
        padding: 0 1.4em 1.4em 1.4em !important;
        margin: 0 0 1.5em 0 !important;
        -webkit-box-shadow: 0px 0px 0px 0px #000;
        box-shadow: 0px 0px 0px 0px #000;
    }

    legend.scheduler-border {
        width: inherit; /* Or auto */
        padding: 0 10px; /* To give a bit of padding on the left and right */
        border-bottom: none;
    }
</style>
<script>
    ////////////////for htmleditor(CK editor)
    initSample('editor');
    $("#editor").html($("#PageContent").val());
    $("#Edit").submit(function () {
        $("#editor").html(CKEDITOR.instances["editor"].getData());
        $("#PageContent").val($("#editor").html());
        @*$.ajax({
            url: '@Url.Action("Create", "HandBook")',
            type: 'GET',
            data: {

                PageContent: $("#PageContent").val().trim()

            },
            cache: 'false',
            success: function (result) {
                if (result == "True") {
                    //alert(result);
                    return false;
                }
                else {
                    //alert(result);
                    return false;
                }
            },
            error: function () {
                //alert("Error");
                //alert(result);
                return false;
            }
        });*@
        });
</script>   
<script>
    $('#Chapter').addClass('form-control');
    $('#Section').addClass('form-control');
</script>
<script>
    $(function () {


        $('#Chapter').change(function () {

            $('#Section').empty();

            $.ajax({
                type: "POST",               
                url: '@Url.Action("GetStatesBySectionName", "Handbook")',
                datatype: "Json",
                data: { Chapter_Id: $('#Chapter').val() },
                success: function (data) {
                    $.each(data, function (index, value) {
                        $('#Section').append('<option value="' + value.Section_Id + '">' + value.SectionName + '</option>');
                    });
                }
            });
        });
    });
</script>